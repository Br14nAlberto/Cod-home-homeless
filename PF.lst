CCS PCM C Compiler, Version 5.015, 5967               06-dic.-22 17:51

               Filename:   C:\Users\Usuario\Documents\Septimo semestre\micro  controladores y procesadores-materia\proyecto final\PF.lst

               ROM used:   465 words (6%)
                           Largest free fragment is 2048
               RAM used:   13 (4%) at main() level
                           27 (7%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   12E
0003:  NOP
.................... #include<16f887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  MOVLW  8E
0005:  MOVWF  77
0006:  MOVF   25,W
0007:  MOVWF  78
0008:  MOVF   24,W
0009:  MOVWF  79
000A:  CLRF   7A
000B:  MOVF   78,F
000C:  BTFSS  03.2
000D:  GOTO   018
000E:  MOVF   79,W
000F:  MOVWF  78
0010:  CLRF   79
0011:  MOVLW  08
0012:  SUBWF  77,F
0013:  MOVF   78,F
0014:  BTFSS  03.2
0015:  GOTO   018
0016:  CLRF   77
0017:  GOTO   020
0018:  BCF    03.0
0019:  BTFSC  78.7
001A:  GOTO   01F
001B:  RLF    79,F
001C:  RLF    78,F
001D:  DECF   77,F
001E:  GOTO   018
001F:  BCF    78.7
0020:  BCF    0A.3
0021:  BCF    0A.4
0022:  GOTO   17A (RETURN)
0023:  MOVF   28,W
0024:  BTFSC  03.2
0025:  GOTO   0E8
0026:  MOVWF  34
0027:  MOVF   2C,W
0028:  BTFSC  03.2
0029:  GOTO   0E8
002A:  SUBWF  34,F
002B:  BTFSS  03.0
002C:  GOTO   032
002D:  MOVLW  7F
002E:  ADDWF  34,F
002F:  BTFSC  03.0
0030:  GOTO   0E8
0031:  GOTO   038
0032:  MOVLW  81
0033:  SUBWF  34,F
0034:  BTFSS  03.0
0035:  GOTO   0E8
0036:  BTFSC  03.2
0037:  GOTO   0E8
0038:  MOVF   34,W
0039:  MOVWF  77
003A:  CLRF   78
003B:  CLRF   79
003C:  CLRF   7A
003D:  CLRF   33
003E:  MOVF   29,W
003F:  MOVWF  32
0040:  BSF    32.7
0041:  MOVF   2A,W
0042:  MOVWF  31
0043:  MOVF   2B,W
0044:  MOVWF  30
0045:  MOVLW  19
0046:  MOVWF  34
0047:  MOVF   2F,W
0048:  SUBWF  30,F
0049:  BTFSC  03.0
004A:  GOTO   05B
004B:  MOVLW  01
004C:  SUBWF  31,F
004D:  BTFSC  03.0
004E:  GOTO   05B
004F:  SUBWF  32,F
0050:  BTFSC  03.0
0051:  GOTO   05B
0052:  SUBWF  33,F
0053:  BTFSC  03.0
0054:  GOTO   05B
0055:  INCF   33,F
0056:  INCF   32,F
0057:  INCF   31,F
0058:  MOVF   2F,W
0059:  ADDWF  30,F
005A:  GOTO   08D
005B:  MOVF   2E,W
005C:  SUBWF  31,F
005D:  BTFSC  03.0
005E:  GOTO   076
005F:  MOVLW  01
0060:  SUBWF  32,F
0061:  BTFSC  03.0
0062:  GOTO   076
0063:  SUBWF  33,F
0064:  BTFSC  03.0
0065:  GOTO   076
0066:  INCF   33,F
0067:  INCF   32,F
0068:  MOVF   2E,W
0069:  ADDWF  31,F
006A:  MOVF   2F,W
006B:  ADDWF  30,F
006C:  BTFSS  03.0
006D:  GOTO   08D
006E:  INCF   31,F
006F:  BTFSS  03.2
0070:  GOTO   08D
0071:  INCF   32,F
0072:  BTFSS  03.2
0073:  GOTO   08D
0074:  INCF   33,F
0075:  GOTO   08D
0076:  MOVF   2D,W
0077:  IORLW  80
0078:  SUBWF  32,F
0079:  BTFSC  03.0
007A:  GOTO   08C
007B:  MOVLW  01
007C:  SUBWF  33,F
007D:  BTFSC  03.0
007E:  GOTO   08C
007F:  INCF   33,F
0080:  MOVF   2D,W
0081:  IORLW  80
0082:  ADDWF  32,F
0083:  MOVF   2E,W
0084:  ADDWF  31,F
0085:  BTFSS  03.0
0086:  GOTO   06A
0087:  INCF   32,F
0088:  BTFSS  03.2
0089:  GOTO   06A
008A:  INCF   33,F
008B:  GOTO   06A
008C:  BSF    7A.0
008D:  DECFSZ 34,F
008E:  GOTO   090
008F:  GOTO   09B
0090:  BCF    03.0
0091:  RLF    30,F
0092:  RLF    31,F
0093:  RLF    32,F
0094:  RLF    33,F
0095:  BCF    03.0
0096:  RLF    7A,F
0097:  RLF    79,F
0098:  RLF    78,F
0099:  RLF    35,F
009A:  GOTO   047
009B:  BTFSS  35.0
009C:  GOTO   0A3
009D:  BCF    03.0
009E:  RRF    78,F
009F:  RRF    79,F
00A0:  RRF    7A,F
00A1:  RRF    35,F
00A2:  GOTO   0A6
00A3:  DECF   77,F
00A4:  BTFSC  03.2
00A5:  GOTO   0E8
00A6:  BTFSC  35.7
00A7:  GOTO   0CF
00A8:  BCF    03.0
00A9:  RLF    30,F
00AA:  RLF    31,F
00AB:  RLF    32,F
00AC:  RLF    33,F
00AD:  MOVF   2F,W
00AE:  SUBWF  30,F
00AF:  BTFSC  03.0
00B0:  GOTO   0BB
00B1:  MOVLW  01
00B2:  SUBWF  31,F
00B3:  BTFSC  03.0
00B4:  GOTO   0BB
00B5:  SUBWF  32,F
00B6:  BTFSC  03.0
00B7:  GOTO   0BB
00B8:  SUBWF  33,F
00B9:  BTFSS  03.0
00BA:  GOTO   0DE
00BB:  MOVF   2E,W
00BC:  SUBWF  31,F
00BD:  BTFSC  03.0
00BE:  GOTO   0C6
00BF:  MOVLW  01
00C0:  SUBWF  32,F
00C1:  BTFSC  03.0
00C2:  GOTO   0C6
00C3:  SUBWF  33,F
00C4:  BTFSS  03.0
00C5:  GOTO   0DE
00C6:  MOVF   2D,W
00C7:  IORLW  80
00C8:  SUBWF  32,F
00C9:  BTFSC  03.0
00CA:  GOTO   0CF
00CB:  MOVLW  01
00CC:  SUBWF  33,F
00CD:  BTFSS  03.0
00CE:  GOTO   0DE
00CF:  INCF   7A,F
00D0:  BTFSS  03.2
00D1:  GOTO   0DE
00D2:  INCF   79,F
00D3:  BTFSS  03.2
00D4:  GOTO   0DE
00D5:  INCF   78,F
00D6:  BTFSS  03.2
00D7:  GOTO   0DE
00D8:  INCF   77,F
00D9:  BTFSC  03.2
00DA:  GOTO   0E8
00DB:  RRF    78,F
00DC:  RRF    79,F
00DD:  RRF    7A,F
00DE:  MOVF   29,W
00DF:  MOVWF  34
00E0:  MOVF   2D,W
00E1:  XORWF  34,F
00E2:  BTFSS  34.7
00E3:  GOTO   0E6
00E4:  BSF    78.7
00E5:  GOTO   0EC
00E6:  BCF    78.7
00E7:  GOTO   0EC
00E8:  CLRF   77
00E9:  CLRF   78
00EA:  CLRF   79
00EB:  CLRF   7A
00EC:  BCF    0A.3
00ED:  BCF    0A.4
00EE:  GOTO   190 (RETURN)
00EF:  MOVF   25,W
00F0:  MOVWF  2C
00F1:  MOVF   29,W
00F2:  XORWF  2C,F
00F3:  BTFSS  2C.7
00F4:  GOTO   0FA
00F5:  BCF    03.2
00F6:  BCF    03.0
00F7:  BTFSC  25.7
00F8:  BSF    03.0
00F9:  GOTO   12D
00FA:  MOVF   25,W
00FB:  MOVWF  2C
00FC:  MOVF   28,W
00FD:  MOVWF  2D
00FE:  MOVF   24,W
00FF:  SUBWF  2D,F
0100:  BTFSC  03.2
0101:  GOTO   108
0102:  BTFSS  2C.7
0103:  GOTO   12D
0104:  MOVF   03,W
0105:  XORLW  01
0106:  MOVWF  03
0107:  GOTO   12D
0108:  MOVF   29,W
0109:  MOVWF  2D
010A:  MOVF   25,W
010B:  SUBWF  2D,F
010C:  BTFSC  03.2
010D:  GOTO   114
010E:  BTFSS  2C.7
010F:  GOTO   12D
0110:  MOVF   03,W
0111:  XORLW  01
0112:  MOVWF  03
0113:  GOTO   12D
0114:  MOVF   2A,W
0115:  MOVWF  2D
0116:  MOVF   26,W
0117:  SUBWF  2D,F
0118:  BTFSC  03.2
0119:  GOTO   120
011A:  BTFSS  2C.7
011B:  GOTO   12D
011C:  MOVF   03,W
011D:  XORLW  01
011E:  MOVWF  03
011F:  GOTO   12D
0120:  MOVF   2B,W
0121:  MOVWF  2D
0122:  MOVF   27,W
0123:  SUBWF  2D,F
0124:  BTFSC  03.2
0125:  GOTO   12C
0126:  BTFSS  2C.7
0127:  GOTO   12D
0128:  MOVF   03,W
0129:  XORLW  01
012A:  MOVWF  03
012B:  GOTO   12D
012C:  BCF    03.0
012D:  RETURN
....................  
.................... #list 
....................  
.................... #device *=16 
.................... #device adc=10 
.................... #use delay (clock=4M) 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
....................    delay_cycles(1); 
....................    lcd_output_enable(1); 
....................    delay_cycles(1); 
....................    high = lcd_read_nibble(); 
....................        
....................    lcd_output_enable(0); 
....................    delay_cycles(1); 
....................    lcd_output_enable(1); 
....................    delay_us(1); 
....................    low = lcd_read_nibble(); 
....................        
....................    lcd_output_enable(0); 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
....................    lcd_output_enable(1); 
....................    delay_us(2); 
....................    lcd_output_enable(0); 
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
....................    lcd_rs_tris(); 
....................    lcd_rw_tris(); 
....................   #endif 
....................  
....................    lcd_output_rs(0); 
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
....................    lcd_output_rs(address); 
....................    delay_cycles(1); 
....................    lcd_output_rw(0); 
....................    delay_cycles(1); 
....................    lcd_output_enable(0); 
....................    lcd_send_nibble(n >> 4); 
....................    lcd_send_nibble(n & 0xf); 
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
....................    lcd_output_rs(0); 
....................    lcd_output_rw(0); 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
....................    lcd_rs_tris(); 
....................    lcd_rw_tris(); 
....................  #endif 
....................      
....................    delay_ms(15); 
....................    for(i=1;i<=3;++i) 
....................    { 
....................        lcd_send_nibble(3); 
....................        delay_ms(5); 
....................    } 
....................     
....................    lcd_send_nibble(2); 
....................    delay_ms(5); 
....................    for(i=0;i<=3;++i) 
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
....................       address=LCD_LINE_TWO; 
....................    else 
....................       address=0; 
....................       
....................    address+=x-1; 
....................    lcd_send_byte(0,0x80|address); 
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
....................                      delay_ms(2); 
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
....................      #endif 
....................    } 
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................   
.................... //esta parte hacer que el sensor de temperatura gire el motor 
.................... float temperatura; 
....................  
.................... void main() 
012E:  MOVF   03,W
012F:  ANDLW  1F
0130:  MOVWF  03
0131:  BSF    03.5
0132:  BSF    03.6
0133:  MOVF   09,W
0134:  ANDLW  C0
0135:  MOVWF  09
0136:  BCF    03.6
0137:  BCF    1F.4
0138:  BCF    1F.5
0139:  MOVLW  00
013A:  BSF    03.6
013B:  MOVWF  08
013C:  BCF    03.5
013D:  CLRF   07
013E:  CLRF   08
013F:  CLRF   09
0140:  BCF    03.7
.................... { 
....................  
.................... setup_adc_ports (sAN0);//entrada del ML35 
0141:  BSF    03.5
0142:  MOVF   09,W
0143:  ANDLW  C0
0144:  MOVWF  09
0145:  BCF    03.6
0146:  BCF    1F.4
0147:  BCF    1F.5
0148:  MOVLW  01
0149:  BSF    03.6
014A:  MOVWF  08
.................... setup_adc(ADC_CLOCK_INTERNAL); 
014B:  BCF    03.5
014C:  BCF    03.6
014D:  BSF    1F.6
014E:  BSF    1F.7
014F:  BSF    03.5
0150:  BSF    1F.7
0151:  BCF    03.5
0152:  BSF    1F.0
.................... setup_COUNTERS(RTCC_internal.rtcc_div_1);//marca de divicion 
0153:  MOVLW  09
0154:  BSF    03.6
0155:  MOVWF  05
0156:  MOVLW  08
0157:  MOVWF  77
0158:  BCF    03.6
0159:  CLRF   01
015A:  MOVLW  81
015B:  MOVWF  04
015C:  BCF    03.7
015D:  MOVF   00,W
015E:  ANDLW  C0
015F:  IORLW  07
0160:  MOVWF  00
0161:  CLRWDT
0162:  MOVF   00,W
0163:  ANDLW  C7
0164:  BTFSC  77.3
0165:  ANDLW  C0
0166:  IORWF  77,W
0167:  MOVWF  00
.................... set_adc_channel(0); 
0168:  MOVLW  00
0169:  MOVWF  78
016A:  MOVF   1F,W
016B:  ANDLW  C3
016C:  IORWF  78,W
016D:  MOVWF  1F
.................... //******************************************************** 
....................  
.................... //lcd_init(); 
.................... //lcd_gotoxy(5,1); 
.................... //printf(lcd_putc,"Temperatura"); 
.................... //delay_ms(350); 
.................... //lcd_init(); 
....................  
....................  
.................... while(true) 
.................... { 
.................... temperatura=(float)read_adc()/2; 
016E:  BSF    1F.1
016F:  BTFSC  1F.1
0170:  GOTO   16F
0171:  MOVF   1E,W
0172:  MOVWF  7A
0173:  BSF    03.5
0174:  MOVF   1E,W
0175:  BCF    03.5
0176:  MOVWF  24
0177:  MOVF   1E,W
0178:  MOVWF  25
0179:  GOTO   004
017A:  MOVF   7A,W
017B:  MOVWF  27
017C:  MOVF   79,W
017D:  MOVWF  26
017E:  MOVF   78,W
017F:  MOVWF  25
0180:  MOVF   77,W
0181:  MOVWF  24
0182:  MOVF   7A,W
0183:  MOVWF  2B
0184:  MOVF   79,W
0185:  MOVWF  2A
0186:  MOVF   78,W
0187:  MOVWF  29
0188:  MOVF   77,W
0189:  MOVWF  28
018A:  CLRF   2F
018B:  CLRF   2E
018C:  CLRF   2D
018D:  MOVLW  80
018E:  MOVWF  2C
018F:  GOTO   023
0190:  MOVF   7A,W
0191:  MOVWF  23
0192:  MOVF   79,W
0193:  MOVWF  22
0194:  MOVF   78,W
0195:  MOVWF  21
0196:  MOVF   77,W
0197:  MOVWF  20
.................... //************temperatura en grados centrigrados 
.................... //lcd_gotoxy(5,1); 
.................... //print(lcd_putc,"%f",temperatura); 
.................... //lcd_gotoxy(14,1); 
.................... //printf(lcd_putc,"Grados"); 
.................... //delay_ms(200); 
....................  
....................  
.................... //********** si la temperatura es mayor que 35 
.................... if(temperatura<=500&&temperatura>=35) 
0198:  MOVF   23,W
0199:  MOVWF  27
019A:  MOVF   22,W
019B:  MOVWF  26
019C:  MOVF   21,W
019D:  MOVWF  25
019E:  MOVF   20,W
019F:  MOVWF  24
01A0:  CLRF   2B
01A1:  CLRF   2A
01A2:  MOVLW  7A
01A3:  MOVWF  29
01A4:  MOVLW  87
01A5:  MOVWF  28
01A6:  CALL   0EF
01A7:  BTFSC  03.0
01A8:  GOTO   1AB
01A9:  BTFSS  03.2
01AA:  GOTO   1C7
01AB:  CLRF   27
01AC:  CLRF   26
01AD:  MOVLW  0C
01AE:  MOVWF  25
01AF:  MOVLW  84
01B0:  MOVWF  24
01B1:  MOVF   23,W
01B2:  MOVWF  2B
01B3:  MOVF   22,W
01B4:  MOVWF  2A
01B5:  MOVF   21,W
01B6:  MOVWF  29
01B7:  MOVF   20,W
01B8:  MOVWF  28
01B9:  CALL   0EF
01BA:  BTFSC  03.0
01BB:  GOTO   1BE
01BC:  BTFSS  03.2
01BD:  GOTO   1C7
....................    { 
....................    output_high(pin_a1); 
01BE:  BSF    03.5
01BF:  BCF    05.1
01C0:  BCF    03.5
01C1:  BSF    05.1
....................    output_high(pin_a2); 
01C2:  BSF    03.5
01C3:  BCF    05.2
01C4:  BCF    03.5
01C5:  BSF    05.2
....................    //output_low(pin_a3); 
....................     
....................     
....................    //lcd_gotoxy(5,2); 
....................    //printf(lcd_putc,"Disipando Calor"); 
....................    //delay_ms(200); 
....................    } 
01C6:  GOTO   1CF
.................... //************si la temperatura es correcta o menor que 15    
.................... else{ 
....................    output_low(pin_a1); 
01C7:  BSF    03.5
01C8:  BCF    05.1
01C9:  BCF    03.5
01CA:  BCF    05.1
....................    output_low(pin_a2); 
01CB:  BSF    03.5
01CC:  BCF    05.2
01CD:  BCF    03.5
01CE:  BCF    05.2
....................    //output_high(pin_a3); 
....................     
....................     
....................    //lcd_gotoxy(5,2); 
....................    //printf(lcd_putc,"Correcta funcion"); 
....................    //delay_ms(200); 
.................... } 
01CF:  GOTO   16E
.................... } 
.................... }  
....................  
01D0:  SLEEP

Configuration Fuses:
   Word  1: 2FE7   RC NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
